<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gD/4IYD//hnH//+f//////////////////8=
</value>
  </data>
</root>